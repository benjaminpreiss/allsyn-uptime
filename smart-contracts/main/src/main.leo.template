import token_registry.aleo;
// The 'aleo_checker_nft' program.
program allsyn.aleo {
    // the public balance of each token for each owner is tracked by token_registry for me.
    // In allsyn, we register a new token for every valuation.

    // Maximum allowed evaluation deviation when minting receipts
    const MAX_PERCENTAGE_DEVIATION: u64 = 3u64;
    // the smart contract admin
    const ALLSYN_ADMIN: address = $ALEO_ADMIN_ADDRESS;
    // The allsyn token data
    const ALLSYN_TOKEN_ID: field = 12736872field;
    const ALLSYN_TOKEN_NAME: u128 = 1273687u128;
    const ALLSYN_TOKEN_SYMBOL: u128 = 1273687u128;
    const ALLSYN_TOKEN_DECIMALS: u8 = 6u8;
    const ALLSYN_TOKEN_MAX_SUPPLY: u128 = 1000000000u128;

    // historical data on the allsyn token id minted on official token registry
    // keep up to date token id at index 0
    mapping allsyn_token_id: u64 => field;

    // receipt valuations (in allsyn tokens / # check cycles) when they were minted.
    mapping receipt_valuations: field => DecimalValue;

    // check cycle valuation history (in allsyn tokens / # check cycles) when they were minted.
    // We want to keep this valuation dynamic to make stablize the cost of one check expressed in dollars.
    // timestamp measured as epoch in seconds => DecimalValue.
    // we also store the latest valuation at epoch 0.
    mapping check_cycle_valuation: u64 => DecimalValue;

    // token data. maps token_id from token_registry -> data
    mapping receipt_data: field => Data;

    // receipt balances
    // nft commits (which is hash of data and edition) => Balance
    mapping balances: field => u64;

    // The token valuation represented as an unsigned int (significand) x exponent (to base 10).
    // So e.g. (104, -1) would be 10.4
    struct DecimalValue {
        // max value 18,446,744,073,709,551,615 (u64)
        significand: u64,
        // scaling factor base 10, signed integer, value range [0, 255].
        // This exponent is only used to represent decimals! so 1 for 10^-1, 2 for 10^-2 etc.
        neg_exponent: u8,
    }

    struct MetaData {
        // irys tx id has 32 bytes of raw data - fits into field.
        irys_tx_id: [u128; 2],
    }

    struct Data {
        metadata: MetaData, // URI of off-chain metadata JSON
        // Optional fields like name, image, attributes can be added here
    }
    // Receipt that is returned for payment with allsyn_tokens
    record Receipt {
        private owner: address,
        private edition: scalar,
        public token_id: field,
        public data: Data,
        // transacted amount of check cycles, cannot be < 0 and is integer.
        public check_cycles: u64,
        // At what valuation was the receipt generated?
        public valuation: DecimalValue,
    }

    inline commit_nft(
        data: Data,
        edition: scalar
    ) -> field {
        let data_hash: field = BHP256::hash_to_field(data);
        let commitment: field = BHP256::commit_to_field(data_hash, edition);
        return commitment;
    }

    // Initialize the program after deployment.
    async transition init() -> Future {
        // Make sure caller is ALLSYN_ADMIN
        assert(self.caller == ALLSYN_ADMIN);
        return finalize_init();
    }

    async function finalize_init() {
        // Set first check_cycle_valuation, if not already done
        if !Mapping::contains(check_cycle_valuation, 0u64) {
            let base_check_cycle_valuation: DecimalValue = DecimalValue {
                // daily checks = 100 (checker nodes) x 60 (hourly checks) x 24 = 144.000 checks
                // monthly checks (at 30 days) = 4.320.000 checks
                // check cycle value = 3$ / ( 0.1271 * 10^-6 ) ($ / allsyn token) / 4.320.000 check cycles = 5.463764315 allsyn token / check cycle
                significand: 5463764315u64,
                neg_exponent: 9u8
            };
            Mapping::set(check_cycle_valuation, 0u64, base_check_cycle_valuation);
        }
    }

    // Registers a new allsyn token
    async transition register_allsyn_token() -> Future {
        // Ensure only the admin can call this function
        assert_eq(self.caller, ALLSYN_ADMIN);

        // register Token
        let register_token_future: Future = token_registry.aleo/register_token(ALLSYN_TOKEN_ID, ALLSYN_TOKEN_NAME, ALLSYN_TOKEN_SYMBOL, ALLSYN_TOKEN_DECIMALS, ALLSYN_TOKEN_MAX_SUPPLY, false, ALLSYN_ADMIN);
        let finalize_future: Future = finalize_register_allsyn_token(register_token_future);
        return finalize_future;
    }

    async function finalize_register_allsyn_token(register_token_future: Future) {
        register_token_future.await();
        // Set the new token ID at index 0, representing the current official token ID
        Mapping::set(allsyn_token_id, 0u64, ALLSYN_TOKEN_ID);
    }

    // Top up token reservoir on smart contract
    // WARNING! anyone can do this currently and it doesnt cost anything.
    async transition mint_tokens_private(
        public amount: u128,
        private recipient: address
    ) -> (token_registry.aleo/Token, Future) {
        // mint new tokens
        let (mint_token_change, mint_token_future) : (token_registry.aleo/Token,Future) = token_registry.aleo/mint_private(ALLSYN_TOKEN_ID, recipient, amount, false, 0u32);
        let finalize_future: Future = finalize_mint_tokens_private(mint_token_future);
        return (mint_token_change, finalize_future);
    }

    async function finalize_mint_tokens_private(mint_token_future: Future) {
        mint_token_future.await();
    }

    // Function to allow the admin to update the current Allsyn token ID
    async transition update_allsyn_token_id(
        public new_token_id: field
    ) -> Future {
        // Ensure only the admin can call this function
        assert_eq(self.caller, ALLSYN_ADMIN);

        return finalize_update_allsyn_token_id(new_token_id);
    }

    async function finalize_update_allsyn_token_id(new_token_id: field) {
        // Set the new token ID at index 0, representing the current official token ID
        Mapping::set(allsyn_token_id, 0u64, new_token_id);
    }

    inline safe_pow10(exp: u8) -> u64 {
        assert(exp <= 19u8); // prevent overflow
        return 10u64 ** exp;
    }

    inline getCheckCyclesValue(check_cycles: u64, valuation: DecimalValue) -> u64 {
        // How much does the user need to pay in allsyn tokens? check_cycle_valuation x check_cycles
        let allsyn_token_amount_numerator: u64 = check_cycles * valuation.significand;
        let allsyn_token_amount_denominator: u64 = safe_pow10(valuation.neg_exponent);
        // Ceiling division, i.e. round allsyn_token_amount up. Wastes credits, only if you buy small amounts of check cycles
        let allsyn_token_amount: u64 = (allsyn_token_amount_numerator + allsyn_token_amount_denominator - 1u64) / allsyn_token_amount_denominator;
        return allsyn_token_amount;
    }

    inline u8Max(a: u8, b: u8) -> u8 {
        if a > b {
            return a;
        } else {
            return b;
        }
    }

    inline u64AbsDiff(a: u64, b: u64) -> u64 {
        if a > b {
            return a - b;
        } else {
            return b - a;
        }
    }

    inline calculate_percentage_deviation(
        current: DecimalValue,
        reference: DecimalValue
    ) -> u64 {
        // Normalize the significands by adjusting them using the larger exponent
        let max_exponent: u8 = u8Max(current.neg_exponent, reference.neg_exponent);

        let adjusted_current: u64 = current.significand * safe_pow10(max_exponent - current.neg_exponent);
        let adjusted_reference: u64 = reference.significand * safe_pow10(max_exponent - reference.neg_exponent);

        // Calculate the absolute difference between adjusted significands
        let difference: u64 = u64AbsDiff(adjusted_current, adjusted_reference);

        // Calculate the percentage deviation
        let percentage_deviation: u64 = (difference * 100u64) / adjusted_reference;
        return percentage_deviation;
    }

    // buy check cycles <-> mint private receipt
    // pay with allsyn token
    // this transition will fail if the passed current_check_cycle is not within reasonable bounds.
    async transition mint_private_receipt (
        private input: token_registry.aleo/Token,
        // recipient of receipts
        public to: address,
        // amount of check cycles
        public check_cycles: u64,
        public irys_tx_id_1: u128,
        public irys_tx_id_2: u128,
        private edition: scalar,
        private current_check_cycle_valuation: DecimalValue
    ) -> (token_registry.aleo/Token, Receipt, Future) {
        let metadata: MetaData = MetaData {
            irys_tx_id: [irys_tx_id_1, irys_tx_id_2]
        };
        let data: Data = Data {
            metadata: metadata
        };
        // the commit generated by the edition needs to be new
        let receipt_nft_commit: field = commit_nft(data, edition);

        let allsyn_token_amount: u64 = getCheckCyclesValue(check_cycles, current_check_cycle_valuation);

        // transfer allsyn token
        let (allsyn_token_change, allsyn_token_future) : (token_registry.aleo/Token,Future) = token_registry.aleo/transfer_private_to_public(ALLSYN_ADMIN, allsyn_token_amount as u128, input);

        // create receipt
        let receipt_change: Receipt = Receipt {
            owner: to,
            edition: edition,
            token_id: receipt_nft_commit,
            data: data,
            check_cycles: check_cycles,
            valuation: current_check_cycle_valuation
        };
        let mint_receipt_future: Future = finalize_mint_receipt(receipt_nft_commit, check_cycles, input.token_id, current_check_cycle_valuation, allsyn_token_future, data);
        return (allsyn_token_change, receipt_change, mint_receipt_future);
    }

    async function finalize_mint_receipt(
        nft_commit: field,
        balance: u64,
        input_token_id : field,
        current_check_cycle_valuation: DecimalValue,
        allsyn_token_future : Future,
        data: Data
    ) {
        allsyn_token_future.await();
        // commit has to be new to balances, as only new receipts can be minted.
        // Otherwise edition needs to be picked again.
        assert_eq(Mapping::contains(balances, nft_commit), false);
        // allsyn token id from registry has to have been registered here
        assert_eq(Mapping::contains(allsyn_token_id, 0u64), true);
        // token with which the user pays needs to be allsyn token
        assert_eq(input_token_id, Mapping::get(allsyn_token_id, 0u64));
        // check_cycle_valuation needs to exist
        assert_eq(Mapping::contains(check_cycle_valuation, 0u64), true);

        // check if current_check_cycle_valuation is within allowed percentage deviation
        let reference_valuation: DecimalValue = Mapping::get(check_cycle_valuation, 0u64);
        let percentage_deviation: u64 = calculate_percentage_deviation(current_check_cycle_valuation, reference_valuation);
        assert(percentage_deviation <= MAX_PERCENTAGE_DEVIATION);

        // update balances
        Mapping::set(balances, nft_commit, balance);

        // update receipt_data with the associated data
        Mapping::set(receipt_data, nft_commit, data);
    }
}
